


###########################
#### AZURE CLI INSTALL ####
###########################

curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash


#########################
#### KUBECTL INSTALL ####
#########################

sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2 curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

######################################
#### KUBECTL AUTOCOMPLETE INSTALL ####
######################################

# Install bash completion for kubectl
apt-get install bash-completion

# Add it to your user profile so that it works everytime you log in
echo 'source <(kubectl completion bash)' >>~/.bashrc

# Restart shell
exec bash

# If you have an alias for kubectl, you can extend shell completion to work with that alias:
echo 'alias k=kubectl' >>~/.bashrc
echo 'complete -F __start_kubectl k' >>~/.bashrc


######################
#### HELM INSTALL ####
######################

# Helm now has an installer script that will automatically grab the latest version of Helm and install it locally.
# You can fetch that script, and then execute it locally. It's well documented so that you can read through it and understand what it is doing before you run it.

$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh


###########################
#### TERRAFORM INSTALL ####
###########################

# Add the HashiCorp GPG key.
$ curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -

# Add the official HashiCorp Linux repository.
$ sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

# Update and install.
$ sudo apt-get update && sudo apt-get install terraform

# Enable tab completion
$ terraform -install-autocomplete



############################
#### POWERSHELL INSTALL ####
############################

# This version is supported on Ubuntu 18.04

# Update the list of packages
sudo apt-get update
# Install pre-requisite packages.
sudo apt-get install -y wget apt-transport-https
# Download the Microsoft repository GPG keys
wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
# Register the Microsoft repository GPG keys
sudo dpkg -i packages-microsoft-prod.deb
# Update the list of products
sudo apt-get update
# Enable the "universe" repositories
sudo add-apt-repository universe
# Install PowerShell
sudo apt-get install -y powershell
# Start PowerShell
pwsh



##################################
#### CREATE PERSONAL SSH KEYS ####
##################################

# The commands here will let you create new default SSH keys, overwriting existing default keys. 
# Before continuing, check your ~/.ssh folder (for example, /home/santosr/.ssh or C:\Users\santosr\.ssh) and look for the following files: id_rsa, id_rsa.pub
# If these files exist, then you have already created SSH keys. You can overwrite the keys with the following commands, or skip this step and go to configuring SSH keys to reuse these keys.

# This command produces the two keys needed for SSH authentication: your private key ( id_rsa ) and the public key ( id_rsa.pub ). 
ssh-keygen -C "<username>@mtdproducts.com"



##############################
#### CLONE PIPELINES REPO ####
##############################

# Add your SSH public key to Azure devops
# Go to Repo in Azure Devops > Clone > SSH > Managed SSH Keys > New Key > Create a name and paste your public key (~/.ssh/id_rsa.pub)

# Clone the pipelines repo
git clone git@ssh.dev.azure.com:v3/mtdproducts/DevOps/pipeline-utilities

# Test your connection. You should get a message that say's "remote: Shell access is not supported"
ssh -T git@ssh.dev.azure.com


####################
#### JQ INSTALL ####
####################

sudo apt-get install jq
